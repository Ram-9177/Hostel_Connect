name: HostelConnect CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Backend API Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hostelconnect_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: hostelconnect/api/package-lock.json
    
    - name: Install API Dependencies
      working-directory: hostelconnect/api
      run: npm ci
    
    - name: Run API Tests
      working-directory: hostelconnect/api
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hostelconnect_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci-cd-pipeline
    
    - name: Run API Linting
      working-directory: hostelconnect/api
      run: npm run lint
    
    - name: Build API
      working-directory: hostelconnect/api
      run: npm run build

  # Frontend Web App Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install Web Dependencies
      run: npm ci
    
    - name: Run Web Tests
      run: npm run test
    
    - name: Run Web Linting
      run: npm run lint
    
    - name: Build Web App
      run: npm run build

  # Flutter Mobile App Tests
  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Install Flutter Dependencies
      working-directory: hostelconnect/mobile
      run: flutter pub get
    
    - name: Run Flutter Tests
      working-directory: hostelconnect/mobile
      run: flutter test
    
    - name: Run Flutter Analysis
      working-directory: hostelconnect/mobile
      run: flutter analyze
    
    - name: Build Flutter APK
      working-directory: hostelconnect/mobile
      run: flutter build apk --release

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push API Image
      uses: docker/build-push-action@v5
      with:
        context: hostelconnect
        file: hostelconnect/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/hostelconnect-api:latest
          ${{ secrets.DOCKER_USERNAME }}/hostelconnect-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and Push Web Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.web
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/hostelconnect-web:latest
          ${{ secrets.DOCKER_USERNAME }}/hostelconnect-web:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/hostelconnect-api:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/hostelconnect-web:latest
          
          # Update docker-compose
          cd /opt/hostelconnect
          docker-compose down
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/health || exit 1
          
          # Cleanup old images
          docker image prune -f

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run Performance Tests
      run: |
        artillery run hostelconnect/tests/performance/api-load-test.yml
        artillery run hostelconnect/tests/performance/websocket-load-test.yml